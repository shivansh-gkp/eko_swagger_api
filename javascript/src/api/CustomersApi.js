/**
 * transfer_money
 * An API depicting the working of EKO platform
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/InlineResponse2003'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'));
  } else {
    // Browser globals (root is window)
    if (!root.TransferMoney) {
      root.TransferMoney = {};
    }
    root.TransferMoney.CustomersApi = factory(root.TransferMoney.ApiClient, root.TransferMoney.InlineResponse200, root.TransferMoney.InlineResponse2001, root.TransferMoney.InlineResponse2002, root.TransferMoney.InlineResponse2003);
  }
}(this, function(ApiClient, InlineResponse200, InlineResponse2001, InlineResponse2002, InlineResponse2003) {
  'use strict';

  /**
   * Customers service.
   * @module api/CustomersApi
   * @version 0.0.1
   */

  /**
   * Constructs a new CustomersApi. 
   * @alias module:api/CustomersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the customersCustomerIdTypecustomerIdGet operation.
     * @callback module:api/CustomersApi~customersCustomerIdTypecustomerIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Customer Information
     * Get a customer&#39;s basic profile information
     * @param {String} customerIdType Your unique API key that will authenticate your request
     * @param {Number} customerId Value of customer id
     * @param {Number} initiatorId partner id from where the request has been initiated
     * @param {String} developerKey Your unique API key that will authenticate your request
     * @param {Object} opts Optional parameters
     * @param {String} opts.secretKey refer to authentication section
     * @param {String} opts.secretKeyTimestamp refer to authentication section
     * @param {module:api/CustomersApi~customersCustomerIdTypecustomerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.customersCustomerIdTypecustomerIdGet = function(customerIdType, customerId, initiatorId, developerKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerIdType' is set
      if (customerIdType === undefined || customerIdType === null) {
        throw new Error("Missing the required parameter 'customerIdType' when calling customersCustomerIdTypecustomerIdGet");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdTypecustomerIdGet");
      }

      // verify the required parameter 'initiatorId' is set
      if (initiatorId === undefined || initiatorId === null) {
        throw new Error("Missing the required parameter 'initiatorId' when calling customersCustomerIdTypecustomerIdGet");
      }

      // verify the required parameter 'developerKey' is set
      if (developerKey === undefined || developerKey === null) {
        throw new Error("Missing the required parameter 'developerKey' when calling customersCustomerIdTypecustomerIdGet");
      }


      var pathParams = {
        'customer_id_type': customerIdType,
        'customer_id': customerId
      };
      var queryParams = {
        'initiator_id': initiatorId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'developer_key': developerKey,
        'secret-key': opts['secretKey'],
        'secret-key-timestamp': opts['secretKeyTimestamp']
      };
      var formParams = {
      };

      var authNames = ['developer_key'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/customers/{customer_id_type}:{customer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customersCustomerIdTypecustomerIdOtpPut operation.
     * @callback module:api/CustomersApi~customersCustomerIdTypecustomerIdOtpPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend Otp
     * Resend OTP to a customer for verifying his/her mobile number
     * @param {String} customerIdType 
     * @param {Number} customerId id of the customer; currently only mobile number of the customer can be used
     * @param {String} initiatorId partner id from where the request has been initiated
     * @param {String} developerKey Your unique API key that will authenticate your request
     * @param {Object} opts Optional parameters
     * @param {String} opts.secretKey refer to authentication section
     * @param {String} opts.secretKeyTimestamp refer to authentication section
     * @param {module:api/CustomersApi~customersCustomerIdTypecustomerIdOtpPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.customersCustomerIdTypecustomerIdOtpPut = function(customerIdType, customerId, initiatorId, developerKey, opts, callback) {
      opts = opts || {};
      var postBody = initiatorId;

      // verify the required parameter 'customerIdType' is set
      if (customerIdType === undefined || customerIdType === null) {
        throw new Error("Missing the required parameter 'customerIdType' when calling customersCustomerIdTypecustomerIdOtpPut");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdTypecustomerIdOtpPut");
      }

      // verify the required parameter 'initiatorId' is set
      if (initiatorId === undefined || initiatorId === null) {
        throw new Error("Missing the required parameter 'initiatorId' when calling customersCustomerIdTypecustomerIdOtpPut");
      }

      // verify the required parameter 'developerKey' is set
      if (developerKey === undefined || developerKey === null) {
        throw new Error("Missing the required parameter 'developerKey' when calling customersCustomerIdTypecustomerIdOtpPut");
      }


      var pathParams = {
        'customer_id_type': customerIdType,
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'developer_key': developerKey,
        'secret-key': opts['secretKey'],
        'secret-key-timestamp': opts['secretKeyTimestamp']
      };
      var formParams = {
      };

      var authNames = ['developer_key'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/customers/{customer_id_type}:{customer_id}/otp', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customersCustomerIdTypecustomerIdPut operation.
     * @callback module:api/CustomersApi~customersCustomerIdTypecustomerIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Customer
     * Onboard a new customer to enable him/her to transact
     * @param {String} customerIdType 
     * @param {Number} customerId id of the customer; currently only mobile number of the customer can be used
     * @param {String} developerKey Your unique API key that will authenticate your request
     * @param {String} name name of customer
     * @param {Number} initiatorId partner id from where the request has been initiated
     * @param {Object} opts Optional parameters
     * @param {String} opts.secretKey refer to authentication section
     * @param {String} opts.secretKeyTimestamp refer to authentication section
     * @param {Date} opts.dob date of birth of the customer as per id
     * @param {Number} opts.gender 
     * @param {String} opts.addressLine1 
     * @param {String} opts.nationality 
     * @param {String} opts.idProofTypeId 
     * @param {String} opts.idProof 
     * @param {File} opts.file1 
     * @param {File} opts.file2 
     * @param {String} opts.incomeSource 
     * @param {String} opts.remittanceReason 
     * @param {module:api/CustomersApi~customersCustomerIdTypecustomerIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.customersCustomerIdTypecustomerIdPut = function(customerIdType, customerId, developerKey, name, initiatorId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerIdType' is set
      if (customerIdType === undefined || customerIdType === null) {
        throw new Error("Missing the required parameter 'customerIdType' when calling customersCustomerIdTypecustomerIdPut");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdTypecustomerIdPut");
      }

      // verify the required parameter 'developerKey' is set
      if (developerKey === undefined || developerKey === null) {
        throw new Error("Missing the required parameter 'developerKey' when calling customersCustomerIdTypecustomerIdPut");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling customersCustomerIdTypecustomerIdPut");
      }

      // verify the required parameter 'initiatorId' is set
      if (initiatorId === undefined || initiatorId === null) {
        throw new Error("Missing the required parameter 'initiatorId' when calling customersCustomerIdTypecustomerIdPut");
      }


      var pathParams = {
        'customer_id_type': customerIdType,
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'developer_key': developerKey,
        'secret-key': opts['secretKey'],
        'secret-key-timestamp': opts['secretKeyTimestamp']
      };
      var formParams = {
        'name': name,
        'initiator_id': initiatorId,
        'dob': opts['dob'],
        'gender': opts['gender'],
        'address_line1': opts['addressLine1'],
        'nationality': opts['nationality'],
        'id_proof_type_id': opts['idProofTypeId'],
        'id_proof': opts['idProof'],
        'file1': opts['file1'],
        'file2': opts['file2'],
        'income_source': opts['incomeSource'],
        'remittance_reason': opts['remittanceReason']
      };

      var authNames = ['developer_key'];
      var contentTypes = ['application/x-www-form-urlencoded', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/customers/{customer_id_type}:{customer_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customersVerificationOtpotpPut operation.
     * @callback module:api/CustomersApi~customersVerificationOtpotpPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Customer Identity
     * Verify a customer&#39;s mobile number via OTP
     * @param {Number} otp 
     * @param {String} customerIdType 
     * @param {Number} customerId id of the customer; currently only mobile number of the customer can be used
     * @param {String} initiatorId partner id from where the request has been initiated
     * @param {String} developerKey Your unique API key that will authenticate your request
     * @param {Object} opts Optional parameters
     * @param {String} opts.secretKey refer to authentication section
     * @param {String} opts.secretKeyTimestamp refer to authentication section
     * @param {module:api/CustomersApi~customersVerificationOtpotpPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.customersVerificationOtpotpPut = function(otp, customerIdType, customerId, initiatorId, developerKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'otp' is set
      if (otp === undefined || otp === null) {
        throw new Error("Missing the required parameter 'otp' when calling customersVerificationOtpotpPut");
      }

      // verify the required parameter 'customerIdType' is set
      if (customerIdType === undefined || customerIdType === null) {
        throw new Error("Missing the required parameter 'customerIdType' when calling customersVerificationOtpotpPut");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersVerificationOtpotpPut");
      }

      // verify the required parameter 'initiatorId' is set
      if (initiatorId === undefined || initiatorId === null) {
        throw new Error("Missing the required parameter 'initiatorId' when calling customersVerificationOtpotpPut");
      }

      // verify the required parameter 'developerKey' is set
      if (developerKey === undefined || developerKey === null) {
        throw new Error("Missing the required parameter 'developerKey' when calling customersVerificationOtpotpPut");
      }


      var pathParams = {
        'otp': otp
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'developer_key': developerKey,
        'secret-key': opts['secretKey'],
        'secret-key-timestamp': opts['secretKeyTimestamp']
      };
      var formParams = {
        'customer_id_type': customerIdType,
        'customer_id': customerId,
        'initiator_id': initiatorId
      };

      var authNames = ['developer_key'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/customers/verification/otp:{otp}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
