/**
 * transfer_money
 * An API depicting the working of EKO platform
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse20011', 'model/InlineResponse20012', 'model/InlineResponse20013'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse20011'), require('../model/InlineResponse20012'), require('../model/InlineResponse20013'));
  } else {
    // Browser globals (root is window)
    if (!root.TransferMoney) {
      root.TransferMoney = {};
    }
    root.TransferMoney.BanksApi = factory(root.TransferMoney.ApiClient, root.TransferMoney.InlineResponse20011, root.TransferMoney.InlineResponse20012, root.TransferMoney.InlineResponse20013);
  }
}(this, function(ApiClient, InlineResponse20011, InlineResponse20012, InlineResponse20013) {
  'use strict';

  /**
   * Banks service.
   * @module api/BanksApi
   * @version 0.0.1
   */

  /**
   * Constructs a new BanksApi. 
   * @alias module:api/BanksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the banksGet operation.
     * @callback module:api/BanksApi~banksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Bank Details
     * Get the details of a bank like name, bank code, available channels, is IFSC required, is verification available, etc.
     * @param {String} bankCode 
     * @param {Number} initiatorId 
     * @param {String} developerKey Your unique API key that will authenticate your request
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifsc 
     * @param {String} opts.secretKey refer to authentication section
     * @param {String} opts.secretKeyTimestamp refer to authentication section
     * @param {module:api/BanksApi~banksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    this.banksGet = function(bankCode, initiatorId, developerKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bankCode' is set
      if (bankCode === undefined || bankCode === null) {
        throw new Error("Missing the required parameter 'bankCode' when calling banksGet");
      }

      // verify the required parameter 'initiatorId' is set
      if (initiatorId === undefined || initiatorId === null) {
        throw new Error("Missing the required parameter 'initiatorId' when calling banksGet");
      }

      // verify the required parameter 'developerKey' is set
      if (developerKey === undefined || developerKey === null) {
        throw new Error("Missing the required parameter 'developerKey' when calling banksGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'bank_code': bankCode,
        'ifsc': opts['ifsc'],
        'initiator_id': initiatorId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'developer_key': developerKey,
        'secret-key': opts['secretKey'],
        'secret-key-timestamp': opts['secretKeyTimestamp']
      };
      var formParams = {
      };

      var authNames = ['developer_key'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/banks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the banksIdTypeidAccountsidPost operation.
     * @callback module:api/BanksApi~banksIdTypeidAccountsidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Bank Account Details
     * Enables customers to verify bank account number by returning the name of the account holder
     * @param {module:model/String} idType 
     * @param {Number} id need to mention account number which needs to be verified
     * @param {Number} initiatorId 
     * @param {Number} customerId 
     * @param {String} developerKey Your unique API key that will authenticate your request
     * @param {Object} opts Optional parameters
     * @param {String} opts.secretKey refer to authentication section
     * @param {String} opts.secretKeyTimestamp refer to authentication section
     * @param {module:api/BanksApi~banksIdTypeidAccountsidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    this.banksIdTypeidAccountsidPost = function(idType, id, initiatorId, customerId, developerKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'idType' is set
      if (idType === undefined || idType === null) {
        throw new Error("Missing the required parameter 'idType' when calling banksIdTypeidAccountsidPost");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling banksIdTypeidAccountsidPost");
      }

      // verify the required parameter 'initiatorId' is set
      if (initiatorId === undefined || initiatorId === null) {
        throw new Error("Missing the required parameter 'initiatorId' when calling banksIdTypeidAccountsidPost");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling banksIdTypeidAccountsidPost");
      }

      // verify the required parameter 'developerKey' is set
      if (developerKey === undefined || developerKey === null) {
        throw new Error("Missing the required parameter 'developerKey' when calling banksIdTypeidAccountsidPost");
      }


      var pathParams = {
        'id_type': idType,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'developer_key': developerKey,
        'secret-key': opts['secretKey'],
        'secret-key-timestamp': opts['secretKeyTimestamp']
      };
      var formParams = {
        'initiator_id': initiatorId,
        'customer_id': customerId
      };

      var authNames = ['developer_key'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/banks/id_type::id/accounts/:id', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the panVerifyPost operation.
     * @callback module:api/BanksApi~panVerifyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PAN verification
     * @param {String} panNumber This is the pan number that needs to be verified
     * @param {Number} purpose 
     * @param {String} purposeDesc 
     * @param {Number} customerMobile 
     * @param {Number} initiatorId partner id from where the request has been initiated
     * @param {String} developerKey Your unique API key that will authenticate your request
     * @param {Object} opts Optional parameters
     * @param {String} opts.secretKey refer to authentication section
     * @param {String} opts.secretKeyTimestamp refer to authentication section
     * @param {module:api/BanksApi~panVerifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    this.panVerifyPost = function(panNumber, purpose, purposeDesc, customerMobile, initiatorId, developerKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'panNumber' is set
      if (panNumber === undefined || panNumber === null) {
        throw new Error("Missing the required parameter 'panNumber' when calling panVerifyPost");
      }

      // verify the required parameter 'purpose' is set
      if (purpose === undefined || purpose === null) {
        throw new Error("Missing the required parameter 'purpose' when calling panVerifyPost");
      }

      // verify the required parameter 'purposeDesc' is set
      if (purposeDesc === undefined || purposeDesc === null) {
        throw new Error("Missing the required parameter 'purposeDesc' when calling panVerifyPost");
      }

      // verify the required parameter 'customerMobile' is set
      if (customerMobile === undefined || customerMobile === null) {
        throw new Error("Missing the required parameter 'customerMobile' when calling panVerifyPost");
      }

      // verify the required parameter 'initiatorId' is set
      if (initiatorId === undefined || initiatorId === null) {
        throw new Error("Missing the required parameter 'initiatorId' when calling panVerifyPost");
      }

      // verify the required parameter 'developerKey' is set
      if (developerKey === undefined || developerKey === null) {
        throw new Error("Missing the required parameter 'developerKey' when calling panVerifyPost");
      }


      var pathParams = {
        'pan_number': panNumber,
        'purpose': purpose,
        'purpose_desc': purposeDesc,
        'customer_mobile': customerMobile,
        'initiator_id': initiatorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'developer_key': developerKey,
        'secret-key': opts['secretKey'],
        'secret-key-timestamp': opts['secretKeyTimestamp']
      };
      var formParams = {
      };

      var authNames = ['developer_key'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/pan/verify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
